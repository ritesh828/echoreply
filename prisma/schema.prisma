// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String?  @unique
  emailVerified     DateTime?
  image             String?
  twitterId         String?  @unique
  username          String?
  displayName       String?
  planType          String   @default("free")
  stripeCustomerId  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  settings      Settings?
  tweets        Tweet[]
  replies       Reply[]
  usageTracking UsageTracking[]

  @@map("users")
}

model Settings {
  id                String   @id @default(cuid())
  userId            String   @unique
  keywords          String[] @default([])
  autoReplyEnabled  Boolean  @default(false)
  aiTone            String   @default("professional")
  maxRepliesPerMonth Int     @default(50)
  notifications     Json     @default("{\"email\": true, \"dashboard\": true, \"push\": false}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model Tweet {
  id               String   @id @default(cuid())
  tweetId          String   @unique
  userId           String
  tweetText        String
  authorUsername   String
  authorDisplayName String?
  matchedKeywords  String[] @default([])
  createdAt        DateTime @default(now())
  processedAt      DateTime?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies Reply[]

  @@map("tweets")
}

model Reply {
  id            String    @id @default(cuid())
  tweetId       String
  userId        String
  replyText     String
  status        String    @default("draft") // draft, pending, posted, failed
  postedAt      DateTime?
  errorMessage  String?
  createdAt     DateTime  @default(now())

  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("replies")
}

model UsageTracking {
  id           String @id @default(cuid())
  userId       String
  monthYear    String
  repliesSent  Int    @default(0)
  keywordsTracked Int @default(0)
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, monthYear])
  @@map("usage_tracking")
}